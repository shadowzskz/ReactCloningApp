{"version":3,"sources":["Infobox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","line","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02460438.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./Infobox.css\"\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n    console.log(title, active);\r\n    return (\r\n        <Card\r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"\r\n        }`}\r\n        >\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n            {title}\r\n            </Typography>\r\n            <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n            {cases}\r\n            </h2>\r\n\r\n            <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n            {total} Total\r\n            </Typography>\r\n        </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox;","import React, { useEffect, useState } from 'react';\r\nimport { Line } from  'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\nimport './LineGraph.css'\r\n\r\nconst options = {\r\n        legend: {\r\n        display: false,\r\n        },\r\n        elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n            return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n        },\r\n        scales: {\r\n        xAxes: [\r\n            {\r\n            type: \"time\",\r\n            time: {\r\n                format: \"MM/DD/YY\",\r\n                tooltipFormat: \"ll\",\r\n            },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n            gridLines: {\r\n                display: false,\r\n            },\r\n            ticks: {\r\n                // Include a dollar sign in the ticks\r\n                callback: function (value, index, values) {\r\n                return numeral(value).format(\"0a\");\r\n                },\r\n            },\r\n            },\r\n        ],\r\n        },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n        for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n            x: date,\r\n            y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n    const [data, setData] = useState({});\r\n    \r\n        useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n                console.log(chartData);\r\n                // buildChart(chartData);\r\n            });\r\n        };\r\n    \r\n        fetchData();\r\n        }, [casesType]);\r\n    \r\n        return (\r\n        <div className={props.className} line>\r\n        {/**\r\n                data && data.length\r\n                data protect =>  if no data then undefines\r\n             */}\r\n            {data?.length > 0 && (\r\n            <Line\r\n                data={{\r\n                datasets: [\r\n                    {\r\n                    backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                    borderColor: \"#CC1034\",\r\n                    data: data,\r\n                    },\r\n                ],\r\n                }}\r\n                options={options}\r\n            />\r\n            )}\r\n        </div>\r\n        );\r\n}\r\n\r\n\r\nexport default LineGraph\r\n","import React from 'react';\r\nimport numeral from 'numeral'\r\n\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{ country }</td>\r\n                    <td>\r\n                        <strong>{ numeral(cases).format(\"0,0\") }</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n// Sort data via count\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    \r\n    return sortedData.sort((a, b) => b.cases - a.cases);\r\n\r\n}\r\n\r\n//Styles\r\n\r\nexport const prettyPrintStat = (stat) => \r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw cicles on Map\r\nexport const showDataOnMap = (data, casesType) =>\r\n    data.map((country) => (\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        fillOpacity={0.4}\r\n        radius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n        >\r\n        <Popup>\r\n            <div className=\"info-container\">\r\n                <div\r\n                    className=\"info-flag\"\r\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                ></div>\r\n                <div className=\"info-name\">{country.country}</div>\r\n                <div className=\"info-confirmed\">\r\n                    Cases: {numeral(country.cases).format(\"0,0\")}\r\n                </div>\r\n                <div className=\"info-recovered\">\r\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                </div>\r\n                <div className=\"info-deaths\">\r\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                </div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ));","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n    <div className=\"map\">\r\n        <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {showDataOnMap(countries, casesType)}\r\n        </LeafletMap>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport Infobox from \"./Infobox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  // UseEffect = Runs a piece of code based on a given condiotion when component loads\n  useEffect(() => {\n    // contains all the world wide data as the app starts\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    // The code inside here runs once\n    // When the component loads and not again\n    // async -> send request, wait for it and do something of input\n\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, [])\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    // https://disease.sh/v3/covid-19/countries/all\n    // https://disease.sh/v3/covid-19/countries/[countryCode]\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n\n  \n  return (\n      <div className=\"app\">\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>COVID-19 Tracker</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select\n                variant=\"outlined\"\n                value={country}\n                onChange={onCountryChange}\n              >\n                {/**\n                <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n                <MenuItem value=\"worldwide\">Option Two</MenuItem>\n                <MenuItem value=\"worldwide\">Option Three</MenuItem>\n                <MenuItem value=\"worldwide\">Options</MenuItem>\n              */}\n              {/**\n                Looping through all the country from a list\n              */}\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n          <div className=\"app__stats\">\n            <Infobox \n              isRed\n              onClick = {e => setCasesType('cases')}\n              active={casesType === \"cases\"}\n              title=\"Coronavirus Cases\" \n              total={prettyPrintStat(countryInfo.cases)} \n              cases={prettyPrintStat(countryInfo.todayCases)}\n                />\n              <Infobox  \n                onClick = {e => setCasesType('recovered')}  \n                active={casesType === \"recovered\"}           \n                title=\"Recovered\" \n                total={prettyPrintStat(countryInfo.recovered)} \n                cases={prettyPrintStat(countryInfo.todayRecovered)}\n                  />\n              <Infobox  \n                isRed\n                onClick = {e => setCasesType('deaths')}\n                active={casesType === \"deaths\"}\n                title=\"Deaths\" \n                total={prettyPrintStat(countryInfo.deaths)}  \n                cases={prettyPrintStat(countryInfo.todayDeaths)}\n                  />\n          </div>\n          <Map\n            countries={mapCountries}\n            casesType={casesType}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <div className=\"app__information\">\n              <h3>Live Cases by Country</h3>\n              <Table countries={tableData} />\n              <h3 className=\"gra\">Worldwide new {casesType}</h3>\n              <LineGraph className=\"app__graph\" casesType={casesType} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}